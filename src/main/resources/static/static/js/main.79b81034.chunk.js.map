{"version":3,"sources":["channels/Table.js","channels/Channels.js","App.js","serviceWorker.js","index.js"],"names":["ChannelsTable","state","status","channels","pagination","first","last","number","numberOfElements","totalPages","availablepages","inVerification","Set","verifyAll","forEach","channel","add","id","setState","loadPage","axios","post","then","res","toPage","pageNumber","nextPage","event","previousPage","verify","get","data","content","filter","delete","it","size","setTimeout","render","this","style","marginBottom","Button","positive","class","onClick","Table","Header","Row","HeaderCell","Body","map","item","key","Cell","creationDate","name","soundTrack","uri","has","Footer","colSpan","Menu","floated","Item","as","icon","disabled","Icon","page","active","React","Component","Channels","Container","marginTop","href","target","FixedMenuLayout","fixed","inverted","header","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.79b81034.chunk.js","sourcesContent":["import React from 'react';\nimport { Icon, Menu, Table, Button } from 'semantic-ui-react';\nimport axios from 'axios';\n\nconst AVAILABLE_STATUSES = ['WORKING', 'NOT_WORKING', 'UNKNOWN', 'IN_VALIDATION']\n\nclass ChannelsTable extends React.Component {\n\n    state = {\n        status: 'WORKING',\n        channels: [],\n        pagination: {\n            first: true,\n            last: false,\n            number: 0,\n            numberOfElements: 20,\n            totalPages: 0,\n            availablepages: []\n        },\n        inVerification: new Set()\n    }\n\n    verifyAll = () => {\n        const inVerification = this.state.inVerification;\n        this.state.channels.forEach(channel => {\n            inVerification.add(channel.id);\n        })\n        this.setState({ inVerification }, () => this.loadPage);\n        axios.post(`/channels/verification?status=${this.state.status}`)\n            .then(res => {\n                this.loadPage();\n            })\n    }\n\n    toPage = (pageNumber) => {\n        const pagination = this.state.pagination;\n        pagination.number = pageNumber;\n        this.setState({ pagination }, () => this.loadPage());\n    }\n\n    nextPage = (event) => {\n        const pagination = this.state.pagination;\n        pagination.number++\n        this.setState({ pagination }, () => this.loadPage());\n    }\n\n    previousPage = (event) => {\n        const pagination = this.state.pagination;\n        pagination.number--\n        this.setState({ pagination }, () => this.loadPage());\n    }\n\n    verify = (id) => {\n        const inVerification = this.state.inVerification;\n        inVerification.add(id);\n        this.setState({ inVerification }, () => this.loadPage);\n        axios.post(`/channels/${id}/verification`)\n            .then(res => {\n                this.loadPage();\n            })\n    }\n\n    componentDidMount() {\n        this.loadPage();\n    }\n\n    loadPage = () => {\n        axios.get(`/channels?sort=id,asc&page=${this.state.pagination.number}`)\n            .then(res => {\n                const channels = res.data.content;\n\n                const inVerification = this.state.inVerification;\n\n                channels.filter(channel => channel.status !== 'IN_VALIDATION').forEach(channel => {\n                    inVerification.delete(channel.id);\n                })\n                const availablepages = [res.data.number - 2, res.data.number - 1, res.data.number, res.data.number + 1, res.data.number + 2]\n                    .filter((it) => it >= 0)\n                    .filter((it) => it < res.data.totalPages);\n\n                const pagination = {\n                    first: res.data.first,\n                    last: res.data.last,\n                    number: res.data.number,\n                    numberOfElements: res.data.numberOfElements,\n                    totalPages: res.data.totalPages,\n                    availablepages,\n                    inVerification\n                }\n                if (inVerification.size !== 0) {\n                    setTimeout(this.loadPage, 3000);\n                }\n                this.setState({ channels, pagination, inVerification }, () => this.render());\n            })\n    }\n\n    render() {\n        if (!this.state.channels) {\n            return <p>Loading...</p>\n        }\n        return (\n            <div>\n                <div style={{ marginBottom: '0.5em' }}>\n                    <Button positive class=\"ui button\" onClick={this.verifyAll}>Verify</Button>\n                </div>\n                <Table>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>Id</Table.HeaderCell>\n                            <Table.HeaderCell>Creation Date</Table.HeaderCell>\n                            <Table.HeaderCell>Name</Table.HeaderCell>\n                            <Table.HeaderCell>Status</Table.HeaderCell>\n                            <Table.HeaderCell>Sound Track</Table.HeaderCell>\n                            <Table.HeaderCell>Uri</Table.HeaderCell>\n                            <Table.HeaderCell>Actions</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n\n                    <Table.Body>\n                        {this.state.channels.map(item => {\n                            return (\n                                <Table.Row key={item.id}>\n                                    <Table.Cell>{item.id}</Table.Cell>\n                                    <Table.Cell>{item.creationDate}</Table.Cell>\n                                    <Table.Cell>{item.name}</Table.Cell>\n                                    <Table.Cell>{item.status}</Table.Cell>\n                                    <Table.Cell>{item.soundTrack}</Table.Cell>\n                                    <Table.Cell>{item.uri}</Table.Cell>\n                                    <Table.Cell>\n                                        <Button\n                                            positive={!this.state.inVerification.has(item.id)}\n                                            class=\"ui button {buttonType}\"\n                                            onClick={() => this.verify(item.id)}>\n                                            {this.state.inVerification.has(item.id) ? 'Verifying...' : 'Verify'}\n                                        </Button>\n                                    </Table.Cell>\n                                </Table.Row>\n                            )\n                        })\n                        }\n                    </Table.Body>\n                    <Table.Footer>\n                        <Table.Row>\n                            <Table.HeaderCell colSpan='6'>\n                                <Menu floated='right' pagination>\n                                    <Menu.Item as='a' icon disabled={this.state.pagination.first} onClick={this.previousPage}>\n                                        <Icon name='chevron left' />\n                                    </Menu.Item>\n                                    {this.state.pagination.availablepages.map(page => {\n                                        return (<Menu.Item key={page} onClick={() => this.toPage(page)} active={this.state.pagination.number === page}>{page + 1}</Menu.Item>)\n                                    })}\n                                    <Menu.Item as='a' icon disabled={this.state.pagination.last} onClick={this.nextPage}>\n                                        <Icon name='chevron right' />\n                                    </Menu.Item>\n                                </Menu>\n                            </Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Footer>\n                </Table>\n            </div>\n        );\n    }\n}\n\nexport default ChannelsTable;","import React from 'react';\nimport {\n    Container,\n    Header,\n    Button,\n} from 'semantic-ui-react';\n\nimport ChannelsTable from './Table'\n\nclass Channels extends React.Component {\n    render() {\n        return (\n            <Container style={{ marginTop: '7em' }}>\n                <Header as='h1'>Current channels</Header>\n                <div style={{ marginBottom: '0.5em' }}>\n                    <Button class=\"ui button\" href=\"/channels/export?size=1000&status=WORKING\" target=\"_blank\">Download Working channels</Button>\n                    <Button class=\"ui button\" href=\"/channels/export?size=1000\" target=\"_blank\">Download All channels</Button>\n                </div>\n                <ChannelsTable />\n            </Container >\n        );\n    }\n}\n\nexport default Channels;","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport {\n  Container,\n  Menu,\n} from 'semantic-ui-react'\nimport Channels from \"./channels/Channels\";\n\nconst FixedMenuLayout = () => (\n  <div>\n    <Router>\n      <Menu fixed='top' inverted>\n        <Container>\n          <Menu.Item as='a' header>\n            IPTV Scanner\n        </Menu.Item>\n          <Menu.Item><Link to=\"/\">Home</Link></Menu.Item>\n        </Container>\n      </Menu>\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Channels />\n        </Route>\n        <Route path=\"/todo\">\n          <Channels />\n        </Route>\n      </Switch>\n    </Router>\n  </div>\n)\n\nexport default FixedMenuLayout","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui/dist/semantic.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}